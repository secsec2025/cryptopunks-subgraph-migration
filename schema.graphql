enum TraitType {
  TYPE
  ACCESSORY
}

enum EventType {
  ASSIGN
  TRANSFER
  ASK_CREATED
  ASK_REMOVED
  BID_CREATED
  BID_REMOVED
  SALE
  WRAP
  UNWRAP
}

enum OfferType {
  BID
  ASK
}



type Account @entity {
  "Ethereum Address"
  id: ID!

  "All Punks owned by Account"
  punksOwned: [Punk!] @derivedFrom(field: "owner")

  "Events to Account"
  eventsTo: [Event!]! @derivedFrom(field: "to")

  "Events from Account"
  eventsFrom: [Event!]! @derivedFrom(field: "from")

#  "Purchases by Account"
#  bought: [Event!]! @derivedFrom(field: "to")
#
#  "Punks assigned to account (if any)"
#  assigned: [Event!]! @derivedFrom(field: "to")

#  "Punk transfers by Account"
#  sent: [Event!]! @derivedFrom(field: "from")
#
#  "Punk transfers to Account"
#  received: [Event!]! @derivedFrom(field: "to")

  "Offers (BID/ASK) by Account"
  offers:  [Offer!]! @derivedFrom(field: "from")

#  "Query bids by Account"
#  bids: [Offer!]! @derivedFrom(field: "from")
#
#  "Punks offered for sale by Account"
#  asks: [Offer!]! @derivedFrom(field: "from")

  "Total number of Punks owned by account"
  numberOfPunksOwned: BigInt!

  "Total number of Punks assigned to account"
  numberOfPunksAssigned: BigInt!

  "Total number of transfer by Account"
  numberOfTransfers: BigInt!

  "Total number of sales by Account"
  numberOfSales: BigInt!

  "Total number of purchases by Account"
  numberOfPurchases: BigInt!

  "Total amount spent buying Punks by Account"
  totalSpent: BigInt!

  "Total amount earned by Account from selling Punks"
  totalEarned: BigInt!

  "Average amount spent buying Punks by Account"
  averageAmountSpent: BigInt!

  "Account URL"
  accountUrl: String!
}

type Punk @entity {
  "Punk ID"
  id: ID!

  "Account that received Punk"
  transferedTo: Account

  "Account that claimed Punk"
  assignedTo: Account

  "Punk buyers"
  purchasedBy: Account

  "Punk metadata"
  metadata: MetaData @derivedFrom(field: "punk")

  "Contract data"
  contract: Contract

  "Punk tokenId"
  tokenId: BigInt!

  "Current owner of Punk"
  owner: Account!

  "Wrap Status"
  wrapped: Boolean!

  "All Punk events"
  events: [Event!]! @derivedFrom(field: "nft")

  "Current Ask for Punk"
  currentAsk: Offer

  "Current Bid for Punk"
  currentBid: Offer

  "Current AskCreated event"
  currentAskCreated: Event

  "Current BidCreated event"
  currentBidCreated: Event

  "Number of times Punk has been transferred"
  numberOfTransfers: BigInt!

  "Number of times Punk was sold"
  numberOfSales: BigInt!

  "Current AskRemoved event"
  currentAskRemoved: Event

  "Current BidRemoved event"
  currentBidRemoved: Event

  "Total amount spent purchasing Punk across OpenSea & Rarible marketplaces"
  totalAmountSpentOnPunk: BigInt!

  "Average price for Punk across OpenSea & Rarible marketplaces"
  averageSalePrice: BigInt!
}

type MetaData @entity {
  id: ID!

  tokenId: BigInt!

  "URI of Punk"
  tokenURI: String!

  "Punk image"
  image: String

  "Punk Svg image"
  svg: String

  "Contract URI"
  contractURI: String!

  "Punk"
  punk: Punk! @unique

  "Punk Traits"
  traits: [MetaDataTrait!]! @derivedFrom(field: "metadata")
}

type MetaDataTrait @entity {
  id: ID!
  metadata: MetaData!
  trait: Trait!
}

type Trait @entity {
  "Trait"
  id: ID!
  type: TraitType!
  metaDatas: [MetaDataTrait!]! @derivedFrom(field: "trait")

  "Number of Punks with this trait"
  numberOfNfts: BigInt!
}

type Offer @entity {
  id: ID!

  "Punk owner"
  from: Account!

  "Open Status of Punk. Asks/Bids can be either Open or Closed"
  open: Boolean!

  "Bid/Ask for Punk in ETH"
  amount: BigInt!

  "Punk being offered/bidded"
  nft: Punk

  "Created at. Could be ASK or BID"
  created: Event @unique

  "Removed at. Could be ASK or BID"
  removed: Event

  offerType: OfferType!
}

type Contract @entity {
  "Contract Address"
  id: ID!

  "Token Symbol"
  symbol: String

  "Token name"
  name: String

  "Total supply of tokens"
  totalSupply: BigInt!

  "Total number of Punk sales"
  totalSales: BigInt!

  "Total Sales in ETH for Punks"
  totalAmountTraded: BigInt!

  "The hash of the composite image of all the Punks"
  imageHash: String
}

type Event @entity {
  id: ID!
  "Contract metadata"
  contract: Contract

  "Punk for the Event"
  nft: Punk

  "Event to"
  to: Account
  "Event from"
  from: Account

  amount: BigInt
  type: EventType!
  logNumber: BigInt!

  "Transaction details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!

  "Offer Created by this Event (if one exists/ applicable to ASK_CREATED & BID_CREATED)"
  offerCreated: Offer @derivedFrom(field: "created")

  "Offers Removed by this Event (if any/ applicable to ASK_REMOVED & BID_REMOVED)"
  offersRemoved: [Offer!]! @derivedFrom(field: "removed")
}


type CToken
@entity { #TransferEvents
  "TxHash + logNumber" #This ID/Entity is used for referencing events in the same transaction
  id: ID!

  "Sender"
  from: Account!

  "Recepient"
  to: Account!

  "New owner of Punk"
  owner: String!

  "Amount of cToken transferred"
  amount: BigInt

  punkId: String

  "Field for storing referenceIDs of other events in the same transaction"
  referenceId: String!

  "Transaction details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

type UserProxy @entity {
  "Contract Address of UserProxy"
  id: ID!

  "Account that owns the Proxy"
  user: Account!

  "Transaction details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

type EpnsNotificationCounter @entity {
  id: ID!
  totalCount: BigInt!
}

type EpnsPushNotification @entity {
  id: ID!
  notificationNumber: BigInt!
  recipient: String!
  notification: String!
}